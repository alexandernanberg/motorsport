/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useCylinder } from '@react-three/cannon'
import { useGLTF } from '@react-three/drei'
import { forwardRef } from 'react'

const Wheel = forwardRef(function Wheel(
  { side = 'right', radius = 0.32, ...props },
  forwardedRef
) {
  const { nodes, materials } = useGLTF('/wheel.gltf')

  const scale = radius / 0.24

  const [ref] = useCylinder(
    () => ({
      mass: 20,
      type: 'Kinematic',
      collisionFilterGroup: 0,
      sleepSpeedLimit: 0.03,
      material: {
        friction: 0.1,
      },
      ...props,
      args: [radius, radius, 0.24, 20, 2],
      // rotation: [Math.PI / 2, 0, Math.PI / 2],
    }),
    forwardedRef,
    [radius]
  )

  return (
    <group ref={ref} dispose={null}>
      <group scale={scale}>
        <group
          scale={[side === 'right' ? 1 : -1, 1, 1]}
          // rotation={[0, 0, Math.PI / 2]}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Rim.geometry}
            material={materials['Material.014']}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Tyre.geometry}
            material={materials['Material.016']}
          />
        </group>
      </group>
    </group>
  )
})

export { Wheel }

useGLTF.preload('/wheel.gltf')
